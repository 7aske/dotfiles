#!/bin/bash

export HISTFILESIZE=10000
export HISTSIZE=10000
export LESSHISTSIZE=0
export SAVEHIST=10000
export FZF_DEFAULT_COMMAND='fd --type f --hidden --exclude .git'
if [ "$USER" != "$PROFILE_SOURCED" ]; then
	[ -e "$HOME/.profile" ] && . "$HOME/.profile"
fi
[ -f "$HOME/.cache/wal/colors.sh" ] && . "$HOME/.cache/wal/colors.sh"

#        _ _   
#   __ _(_) |_ 
#  / _` | | __|
# | (_| | | |_ 
#  \__, |_|\__|
#  |___/       
GIT_USER="7aske"
GIT_URL="git@github.com:/$GIT_USER"
gclone()  { git clone "$GIT_URL/$1";       }
gcommit() { git add .; git commit -m "$1"; }
gadd()    { git add $@;                    }
gdiff()   { git diff $@;                   }
greset()  { git reset --hard HEAD;         }
gdry()    { git commit --branch --dry-run; }
gpush()   { git push $@;                   }
gpull()   { git pull $@;                   }
gsl()     { git status --long $@;          }
gss()     { git status -s $@;              }
gst()     { git stash $@;                  }
gsta()    { git stash apply $@;            }
gstp()    { git stash pop $@;              }
gsts()    { git stash show $@;             }
gfet()    { git fetch $@;                  }
glog()    { git log --graph $@;            }
gremote() { git remote -v $@;              }
gco()     { git checkout $@;               }
gammend() { git commit --amend $@;         }
gsw()     { git switch $@;                 }

#       _ _                     
#  __ _| (_) __ _ ___  ___  ___ 
# / _` | | |/ _` / __|/ _ \/ __|
#| (_| | | | (_| \__ \  __/\__ \
# \__,_|_|_|\__,_|___/\___||___/
#                               
_setsid() { shift 0; setsid $@ 2>/dev/null 1>/dev/null; }

# setsid aliases
alias webstorm='_setsid webstorm'
alias idea='_setsid idea'
alias goland='_setsid goland'
alias pycharm='_setsid pycharm'
alias clion='_setsid clion'
alias datagrip='_setsid datagrip'
alias zathura='_setsid zathura'
alias studio='_setsid studio'
alias rider='_setsid rider'
alias brave='_setsid brave'
alias et='_setsid et'
alias wps='_setsid wps'
alias wpp='_setsid wpp'

alias cls='clear -x'
alias autoremove='sudo pacman -R $(pacman -Qdtq)'
alias v='nvim'
alias n='nano'
alias o='xdg-open'
alias z='zathura'
alias s='systemctl'
alias e="$TERMFILE"
function c { /usr/bin/code $@; }
alias bat='bat -p --paging never --theme=base16'
alias myip='curl -s api.ipify.org'
alias grep='grep --color=auto'
alias wget='wget --hsts-file=~/.config/wget/.wget-hsts'
alias diff="diff --color=auto"
alias dd='dd status="progress"'
alias rsync='rsync --progress'
alias mkdir='mkdir -v'
alias rmdir='rmdir -v'
alias cal='cal -m'
function randpwd() { python -c "import secrets; print(secrets.token_urlsafe(${1:-"16"}))"; }
# navigation
alias conf='builtin cd $HOME/.config/&& ls'
alias dow='builtin cd $HOME/Downloads&& ls'
alias sha='builtin cd $HOME/Share&& ls'
alias doc='builtin cd $HOME/Documents&& ls'
alias bks='builtin cd $HOME/Documents/books&& ls'
alias uni='builtin cd $HOME/Documents/uni&& ls'
alias pic='builtin cd $HOME/Pictures&& ls'
alias dro='builtin cd $HOME/Dropbox&& ls'
alias pub='builtin cd $HOME/Public&& ls'
alias shr='builtin cd /usr/share&& ls'
alias etc='builtin cd /etc&& ls'
alias lcl='builtin cd $HOME/.local&& ls'
alias lcls='builtin cd $HOME/.local/bin/scripts&& ls'
alias lclb='builtin cd $HOME/.local/bin&& ls'
alias tmp='builtin cd $HOME/.local/tmp&& ls'
alias chgs='cd "$(codegs)" && echo -e "\ngit status -s\n"; git status -s'
alias vicfg='vimcfg'
alias srcvenv='source venv/bin/activate'
# misc
alias tmux='tmux -f "$HOME/.config/tmux/.tmux.conf"'
# ls
alias ls='ls --color=auto -lpvh  --group-directories-first'
alias la='ls --color=auto -lpvhA --group-directories-first'
# personal utils
alias gs='/usr/bin/cgs'

ALIAS_DIR="$HOME/.config/aliases"
if [ -e "$ALIAS_DIR" ]; then
	for _F in $(/usr/bin/ls "$ALIAS_DIR"); do
		source "$ALIAS_DIR/$_F"
	done
fi

# eg. cd ... to jump back two directories
function cd() {
    case $1 in
    ..)
        builtin cd ../ && ls
        ;;
    ...)
        builtin cd ../../ && ls
        ;;
    ....)
        builtin cd ../../../ && ls
        ;;
    .....)
        builtin cd ../../../../ && ls
        ;;
    *)
        builtin cd "$@" && ls
        ;;
    esac
}

function open() {
    unameOut="$(uname -s)"
    case "${unameOut}" in
        Linux*) machine=Linux ;;
        Darwin*) machine=Mac ;;
        CYGWIN*) machine=Cygwin ;;
        MINGW*) machine=MinGw ;;
        *) machine="UNKNOWN:${unameOut}" ;;
    esac
    if test "${machine}" = 'Linux'; then
        (xdg-open "$@" >/dev/null 2>&1 &)
    elif test "${machine}" = 'Cygwin' || test "${machine}" = 'MinGw'; then
        explorer "$@" &
    elif test "${machine}" = 'Mac'; then
        open "$@"
    else
        echo 'Unsupported OS'
    fi
}

if [ -n "$FZF_CODE" ]; then
	function code() {
		_CODE="$(cgs -C)"
		if [ -z "$_CODE" ]; then
			_CODE="$CODE"
		fi
		if [ $# -eq 0 ]; then
			builtin cd "$_CODE" && ls
			return 0
		fi

		if [ $# -eq 1 ]; then
			MATCH="$(fd . "$_CODE" -d 2 -L -t d | fzf -f "$1" | head -1)"
		elif [ $# -eq 2 ]; then
			MATCH="$(fd . "$_CODE/$1" -d 2 -L -t d | fzf -f "$2" | head -1)"
		fi

		if [ -z "$MATCH" ]; then
			return 1
		fi

		builtin cd "$MATCH" && ls
	}
else
	function code() {
		_CODE="$(cgs -C)"
		if [ -z "$_CODE" ]; then
			_CODE="$CODE"
		fi
		if [ $# -eq 0 ]; then
				builtin cd "$_CODE" && ls
		elif [ $# -eq 1 ]; then
			if [ -d "$_CODE/$1" ]; then
				builtin cd "$_CODE/$1" && ls
			else
				cdir="$(find "$_CODE" -maxdepth 2 -name "*$1*" | sed -n '1p')"
				[ -d "$cdir" ] && builtin cd "$cdir" && ls
			fi
		elif [ $# -eq 2 ]; then
			if [ -d "$_CODE/$1/$2" ]; then
				builtin cd "$_CODE/$1/$2" && ls
			else
				cdir="$(find "$_CODE/$1" -maxdepth 1 -name "*$2*" | sed -n '1p')"
				[ -d "$cdir" ] && builtin cd "$cdir" && ls
			fi
		fi
	}
fi

# bash specific setup
if [ -n "$BASH" ]; then
	export HISTFILE="$HOME/.cache/.bash_history"
    compl_code() {
        COMPREPLY=()
        local word="${COMP_WORDS[COMP_CWORD]}"
        if [ "$COMP_CWORD" -eq 1 ]; then
            COMPREPLY=($(compgen -W "$(dir $CODE)" -- "$word"))
        else
            local words=("${COMP_WORDS[@]}")
            unset "words[0]"
            unset "words[$COMP_CWORD]"
            local completions=$(dir -F "$CODE"/"${words[*]}")
            COMPREPLY=($(compgen -W "$completions" -- "$word"))
        fi
    }

    complete -F compl_code code

    # PS1 setup
    if [[ "$(id -u)" == "0" ]]; then
        export PS1='\[\033[01;31m\]\u\[\033[01;37m\] \W \[\033[01;32m\]\[\033[01;33m\]$(git branch 2>/dev/null | sed -n "s/* \(.*\)/\1 /p")\[\033[01;31m\]\$\[\033[00m\] '
    else
        export PS1='\[\033[01;34m\]\u\[\033[01;37m\] \W \[\033[01;32m\]\[\033[01;33m\]$(git branch 2>/dev/null | sed -n "s/* \(.*\)/\1 /p")\[\033[01;34m\]\$\[\033[00m\] '
    fi

    if grep SSH_CLIENT <(env) &>/dev/null; then
        #clear -x
        #neofetch --config ~/.config/neofetch/config_ssh.conf 2>/dev/null
        if [[ "$(id -u)" == "0" ]]; then
            export PS1='\[\033[01;31m\]\u@\h\[\033[01;37m\] \W \[\033[01;32m\]\[\033[01;33m\]$(git branch 2>/dev/null | sed -n "s/* \(.*\)/\1 /p")\[\033[01;31m\]\$\[\033[00m\] '
        else
            export PS1='\[\033[01;35m\]\u@\h\[\033[01;37m\] \W \[\033[01;32m\]\[\033[01;33m\]$(git branch 2>/dev/null | sed -n "s/* \(.*\)/\1 /p")\[\033[01;35m\]\$\[\033[00m\] '
        fi
    fi

    # bind 'set editing-mode vi'
    # bind 'set show-mode-in-prompt on'
    # bind 'set vi-ins-mode-string "+"'
    # bind 'set vi-cmd-mode-string ":"'
    # bind 'set keymap vi-insert'

fi
